#!/usr/bin/env node
'use strict'

const fatalError = require('./lib/fatal-error')
const loadKeymapFromFile = require('./lib/keymap-loader')
const argv = require('./lib/command-line-args')
const kleSoureceFilename = argv._[0]
const keymap = loadKeymapFromFile(kleSoureceFilename)
const {
  vector_text, vector_char,
  square, circle,
  union, difference,
  rotate, translate, scale, mirror, hull, chain_hull, expand, contract,
} = require('./lib/render')
const {layerPlan} = require('./lib/layer-plans')
const dimensions = require('./lib/dimensions')
const { rowLength, isFirstRow, isLastRow, firstKey, lastKey, rangeIntersection } = require('./lib/misc')

const renderRows = require('./lib/render-rows')

if (renderRows.length > 1) {
  console.log(`Rendering only rows ${renderRows[0]} to ${renderRows[renderRows.length - 1]}`)
} else if (renderRows.length == 1) {
  console.log(`Rendering only row ${renderRows[0]}`)
}

function main() {
  return layerPlan(keymap, argv.layer)
}

// const outputData = jscad.generateOutput('svg', main())
// fs.writeFileSync('sheet_keyboard.svg', outputData.asBuffer())

const { prepareOutput } = require('@jscad/core/io/prepareOutput')
const svgSource = prepareOutput(main(), { "format": "svg" }).data[0]

// ---

// const outputSvgFilename = "sheet_keyboard.fixed.svg"

const pathElementAdditions = 'stroke="black" fill="lightgray" stroke-width="0.5"'

var gElementsMatch = svgSource.match(/(\<g>.+\<\/g>)/s)

if (!gElementsMatch || gElementsMatch[0].length < 1)
  throw Error(`Could not find any <g> elements in rendered SVG data:\n ${svgSource}`)

/* handle multiple <g> tags */
var gElements = gElementsMatch[0]
  .replace(/^\<g>/, '')    // remove leading
  .replace(/\<\/g>$/, '')  // remove trailing
  .split(/\<\/g>\s*\<g>/s) // split on "</g><g>" boundary

console.log(`Fixing ${gElements.length} <g> elements`)

var gElementsRewrite = gElements.map(function (gElement) {

  // Separate each path element
  var pathElements = gElement
    .split(/(\<path\s+d=\".*\"\/\>)/)
    .filter(part => !part.match(/^\s+$/))

  console.log(`Fixing ${pathElements.length} <path> elements`)

  /*
  The order of the paths often needs to be arranged so the largest ones (the
  baground/outlines) appear before the smaller ones (the key cutouts), otherwise
  we won't be able to see the key cutouts.

  We do this by sorting all the paths with the "largest" Line path position
  value (the largest "Ldddd.dddd" of a path,
  https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths), and making
  sure the largest paths appear first.
  */

  if (argv.noPathReorder) {
    console.log("Will not re-order path elements")
  } else {
    pathElements = pathElements.sort(function (firstEl, secondEl) {
      let getMax = function (element) {
        return [...element.matchAll(/L([\d\.]+)/g)]
          .map(m => parseFloat(m[1]))
          .reduce(function (a, b) { return Math.max(a, b) })
      }

      return getMax(secondEl) - getMax(firstEl)
    })
  }

  // add fill and stroke to each <path>
  return pathElements.map(function (pathElement) {
    return pathElement.replace(/path\s+d=/, 'path ' + pathElementAdditions + ' d=')
  })
})

const fs = require('fs')
const outputSvgFilename = kleSoureceFilename + ".svg"

// Write the new svg file with changed <g>/<path> elements
fs.writeFileSync(
  outputSvgFilename,
  svgSource.replace(
    gElementsMatch[0],
    gElementsRewrite.map(pathElements => "<g>" + pathElements.join("\n") + "</g>").join("\n")
  )
)

console.log(`Wrote ${outputSvgFilename}`)
